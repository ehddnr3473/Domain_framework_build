// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios16.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Domain
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreLocation
@_exported import Domain
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public struct Schedule {
  public let title: Swift.String
  public let description: Swift.String
  public let coordinate: CoreLocation.CLLocationCoordinate2D
  public let fromDate: Foundation.Date?
  public let toDate: Foundation.Date?
  public init(title: Swift.String, description: Swift.String, coordinate: CoreLocation.CLLocationCoordinate2D, fromDate: Foundation.Date?, toDate: Foundation.Date?)
}
extension Domain.Schedule : Swift.Equatable {
  public static func == (lhs: Domain.Schedule, rhs: Domain.Schedule) -> Swift.Bool
}
public protocol PlansRepository {
  #if compiler(>=5.3) && $AsyncAwait
  func upload(at index: Swift.Int, plan: Domain.Plan) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func read() async throws -> [Domain.Plan]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func delete(at index: Swift.Int, plans: [Domain.Plan]) async throws
  #endif
}
public struct SwapPlansBox {
  public let source: Swift.Int
  public let destination: Swift.Int
  public let sourcePlan: Domain.Plan
  public let destinationPlan: Domain.Plan
  public init(source: Swift.Int, destination: Swift.Int, sourcePlan: Domain.Plan, destinationPlan: Domain.Plan)
}
public protocol SwapPlansUseCase {
  #if compiler(>=5.3) && $AsyncAwait
  func execute(_ planSwapBox: Domain.SwapPlansBox) async throws
  #endif
}
public protocol DeleteImageUseCase {
  #if compiler(>=5.3) && $AsyncAwait
  func execute(at index: Swift.Int) async throws
  #endif
}
public protocol MemoriesRepository {
  #if compiler(>=5.3) && $AsyncAwait
  func upload(at index: Swift.Int, memory: Domain.Memory) async throws
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func read() async throws -> [Domain.Memory]
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  func delete(at index: Swift.Int) async throws
  #endif
}
public protocol UploadImageUseCase {
  #if compiler(>=5.3) && $AsyncAwait
  func execute(at index: Swift.Int, _ image: UIKit.UIImage) async throws
  #endif
}
public protocol UploadMemoryUseCase {
  #if compiler(>=5.3) && $AsyncAwait
  func execute(at index: Swift.Int, _ memory: Domain.Memory) async throws
  #endif
}
public protocol ReadPlansUseCase {
  #if compiler(>=5.3) && $AsyncAwait
  func execute() async throws -> [Domain.Plan]
  #endif
}
public protocol DeleteMemoryUseCase {
  #if compiler(>=5.3) && $AsyncAwait
  func execute(at index: Swift.Int) async throws
  #endif
}
public protocol MemoriesUseCaseProvider {
  func provideUploadMemoryUseCase() -> Domain.UploadMemoryUseCase
  func provideReadMemoriesUseCase() -> Domain.ReadMemoriesUseCase
  func provideDeleteMemoryUseCase() -> Domain.DeleteMemoryUseCase
}
public struct DefaultMemoriesUseCaseProvider : Domain.MemoriesUseCaseProvider {
  public init(repository: Domain.MemoriesRepository)
  public func provideUploadMemoryUseCase() -> Domain.UploadMemoryUseCase
  public func provideReadMemoriesUseCase() -> Domain.ReadMemoriesUseCase
  public func provideDeleteMemoryUseCase() -> Domain.DeleteMemoryUseCase
}
public protocol ReadImageUseCase {
  func execute(at index: Swift.Int, completion: @escaping ((Swift.Result<UIKit.UIImage, Swift.Error>) -> Swift.Void))
}
public protocol ReadMemoriesUseCase {
  #if compiler(>=5.3) && $AsyncAwait
  func execute() async throws -> [Domain.Memory]
  #endif
}
public struct Plan {
  public let title: Swift.String
  public let description: Swift.String
  public let schedules: [Domain.Schedule]
  public init(title: Swift.String, description: Swift.String, schedules: [Domain.Schedule])
}
extension Domain.Plan : Swift.Equatable {
  public static func == (lhs: Domain.Plan, rhs: Domain.Plan) -> Swift.Bool
}
public protocol ImagesUseCaseProvider : AnyObject {
  func provideUploadImageUseCase() -> Domain.UploadImageUseCase
  func provideReadImageUseCase() -> Domain.ReadImageUseCase
  func provideDeleteImageUseCase() -> Domain.DeleteImageUseCase
}
final public class DefaultImagesUseCaseProvider : Domain.ImagesUseCaseProvider {
  public init(repository: Domain.ImagesRepository)
  final public func provideUploadImageUseCase() -> Domain.UploadImageUseCase
  final public func provideReadImageUseCase() -> Domain.ReadImageUseCase
  final public func provideDeleteImageUseCase() -> Domain.DeleteImageUseCase
  @objc deinit
}
public struct Memory {
  public let title: Swift.String
  public let index: Swift.Int
  public let uploadDate: Foundation.Date
  public init(title: Swift.String, index: Swift.Int, uploadDate: Foundation.Date)
}
public protocol PlansUseCaseProvider {
  func provideUploadPlanUseCase() -> Domain.UploadPlanUseCase
  func provideReadPlansUseCase() -> Domain.ReadPlansUseCase
  func provideDeletePlanUseCase() -> Domain.DeletePlanUseCase
  func provideSwapPlansUseCase() -> Domain.SwapPlansUseCase
}
public struct DefaultPlansUseCaseProvider : Domain.PlansUseCaseProvider {
  public init(repository: Domain.PlansRepository)
  public func provideUploadPlanUseCase() -> Domain.UploadPlanUseCase
  public func provideReadPlansUseCase() -> Domain.ReadPlansUseCase
  public func provideDeletePlanUseCase() -> Domain.DeletePlanUseCase
  public func provideSwapPlansUseCase() -> Domain.SwapPlansUseCase
}
public protocol DeletePlanUseCase {
  #if compiler(>=5.3) && $AsyncAwait
  func execute(at index: Swift.Int, plans: [Domain.Plan]) async throws
  #endif
}
public protocol ImagesRepository : AnyObject {
  #if compiler(>=5.3) && $AsyncAwait
  func upload(at index: Swift.Int, _ image: UIKit.UIImage) async throws
  #endif
  func read(at index: Swift.Int, _ completion: @escaping ((Swift.Result<UIKit.UIImage, Swift.Error>) -> Swift.Void))
  #if compiler(>=5.3) && $AsyncAwait
  func delete(at index: Swift.Int) async throws
  #endif
}
public protocol UploadPlanUseCase {
  #if compiler(>=5.3) && $AsyncAwait
  func execute(at index: Swift.Int, plan: Domain.Plan) async throws
  #endif
}
